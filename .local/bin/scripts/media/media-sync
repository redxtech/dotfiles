#!/usr/bin/env sh

# pull in some dependencies
# shellcheck source=../utils/testdeps.sh
. "$HOME/.local/bin/scripts/utils/testdeps.sh" || exit 1

# pull in the config
# shellcheck source=../../../dotfiles/config/media-sync.sh
. "$HOME/.local/dotfiles/config/media-sync.sh" || exit 1

# logging function
logger () {
    echo "[$(date "+%Y/%m/%d %H:%M:%S")] $*" >> "$_MS_LOGFILE"
}

# test if tmux session exists
tmux_session_exists () {
    # list tmux sessions, print the first column, and compare it against the expected session name
    if tmux ls 2>/dev/null | awk -F ": " '{print $1}' | grep "$_MS_TMUX_SESSION" >/dev/null; then
        return 0
    else
        return 1
    fi
}

# run command in a tmux session
tmuxify () {
    # test to see if the script is already running
    if ! tmux_session_exists; then
        # if inside an existing tmux session we must unset $TMUX to allow nesting
        if test -z "$TMUX"; then
            tmux new-session -d -s "$_MS_TMUX_SESSION" "$*"
        else
            TMUX=""
            tmux new-session -d -s "$_MS_TMUX_SESSION" "$*"
        fi
    fi
    
    # attach to the existing session if not run by cron
    if test "$_MS_CRON" != "true"; then
        tmux_attach_session
    fi
}

# safely attach to the tmux session
tmux_attach_session () {
    # only try to attach if there's a tmux session open
    if tmux_session_exists; then
        # if inside an existing tmux session we must unset $TMUX to allow nesting
        if test -z "$TMUX"; then
            tmux attach-session -t "$_MS_TMUX_SESSION"
        else
            TMUX=""
            tmux attach-session -t "$_MS_TMUX_SESSION"
        fi
    else
        echo "media-sync isn't currently running."
    fi
}

# main function to handle media-sync
main () {
    # test to see if all the dependencies are installed
    if ! testdeps tmux rclone awk grep tail; then
        exit 1
    fi

    # parse the bandwidth config options
    _MS_BW=""
    if test -n "$_MS_BANDWIDTH_LIMIT"; then
        _MS_BW="--bwlimit $_MS_BANDWIDTH_LIMIT"
    fi

    # starting options for the rclone command
    _MS_RCLONE_TEMPLATE="rclone sync -P --transfers=20 --config=$_MS_RCLONE_CONFIG $_MS_BW"
    _MS_RCLONE_COMMAND=""

    # different options for sonarr and radarr
    _MS_BOTH=false
    case $1 in
        sonarr|tv)
            _MS_RCLONE_COMMAND="$_MS_SONARR_SRC $_MS_SONARR_DEST"
            ;;
        radarr|movie|movies)
            _MS_RCLONE_COMMAND="$_MS_RADARR_SRC $_MS_RADARR_DEST"
            ;;
        attach|monitor|view)
            # attach to the existing session if not run by cron
            if test "$_MS_CRON" != "true"; then
                tmux_attach_session
            fi
            exit 0
            ;;
        log|logs)
            echo "Showing the last 10 lines..."
            tail "$_MS_LOGFILE"
            exit 0
            ;;
        clearlogs)
            rm -i "$_MS_LOGFILE"
            exit 0
            ;;
        *)
            _MS_BOTH=true
            ;;
    esac

    # set some notices to print
    _MS_PRINT_TV="printf \"\nSyncing TV...\n\n\";"
    _MS_PRINT_MOVIES="printf \"\nSyncing Movies...\n\n\";"
    _MS_PRINT_ONE="printf \"\nSyncing $1...\n\n\";"

    if $_MS_BOTH; then
        logger "Syncing both..."
        # run both commands in a tmux session
        tmuxify "$_MS_PRINT_TV $_MS_RCLONE_TEMPLATE $_MS_SONARR_SRC $_MS_SONARR_DEST; $_MS_PRINT_MOVIES  $_MS_RCLONE_TEMPLATE $_MS_RADARR_SRC $_MS_RADARR_DEST"
    else
        logger "Syncing $1..."
        # run the sync command in a tmux session
        tmuxify "$_MS_PRINT_ONE $_MS_RCLONE_TEMPLATE $_MS_RCLONE_COMMAND"
    fi

    logger "Done syncing."
}

# set the trap to run if prematurely exited
trap "cleanup" 2

# run the program
main "$@"


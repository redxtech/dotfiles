#!/usr/bin/env sh

# pull in some dependencies
# shellcheck source=../utils/testdeps.sh
. "$HOME/.local/bin/scripts/utils/testdeps.sh" || exit 1
# shellcheck source=../utils/lockfile.sh
. "$HOME/.local/bin/scripts/utils/lockfile.sh" || exit 1

# pull in the config
# shellcheck source=../../../dotfiles/config/media-sync.sh
. "$HOME/.local/dotfiles/config/media-sync.sh" || exit 1

# cleanup function
cleanup () {
    printf "\nForcefully exiting...\n"

    # deal with the lockfile
    lockfile_exit "$_MS_LOCKFILE"

    # exit the script
    exit 2
}

# run command in a tmux session
tmuxify () {
    # if inside an existing tmux session we must unset $TMUX to allow nesting
    if test -z "$TMUX"; then
        tmux new-session -s "$_MS_TMUX_SESSION" "$@"
    else
        TMUX=""
        tmux new-session -s "$_MS_TMUX_SESSION" "$@"
    fi
}

# safely attach to the tmux session
tmux_attach_session () {
    # if inside an existing tmux session we must unset $TMUX to allow nesting
    if test -z "$TMUX"; then
        tmux attach-session -t "$_MS_TMUX_SESSION"
    else
        TMUX=""
        tmux attach-session -t "$_MS_TMUX_SESSION"
    fi
}

# main function to handle media-sync
main () {
    # test to see if all the dependencies are installed
    if ! testdeps tmux rclone; then
        exit 1
    fi

    # test for lockfile
    if ! lockfile_init "$_MS_LOCKFILE"; then
        # if the command isn't "attach" test for the lockfile
        if test "$1" != "attach"; then
            echo "media-sync is already running in tmux session $_MS_TMUX_SESSION."
            return 1
        fi
    fi

    # parse the bandwidth config options
    _MS_BW=""
    if test -n "$_MS_BANDWIDTH_LIMIT"; then
        _MS_BW="--bwlimit $_MS_BANDWIDTH_LIMIT"
    fi

    # starting options for the rclone command
    _MS_RCLONE_TEMPLATE="rclone sync -P --transfers=20 --config=$_MS_RCLONE_CONFIG $_MS_BW"
    _MS_RCLONE_COMMAND=""

    # different options for sonarr and radarr
    _MS_BOTH=false
    case $1 in
        sonarr|tv)
            _MS_RCLONE_COMMAND="$_MS_SONARR_SRC $_MS_SONARR_DEST"
            ;;
        radarr|movie|movies)
            _MS_RCLONE_COMMAND="$_MS_RADARR_SRC $_MS_RADARR_DEST"
            ;;
        attach)
            lockfile_exit "$_MS_LOCKFILE"
            tmux_attach_session
            exit 0
            ;;
        *)
            _MS_BOTH=true
            ;;
    esac

    if $_MS_BOTH; then
        # run both commands in a tmux session
        tmuxify "$_MS_RCLONE_TEMPLATE $_MS_SONARR_SRC $_MS_SONARR_DEST; $_MS_RCLONE_TEMPLATE $_MS_RADARR_SRC $_MS_RADARR_DEST"
    else
        # run the sync command in a tmux session
        tmuxify "$_MS_RCLONE_TEMPLATE $_MS_RCLONE_COMMAND"
    fi

    # clean up the lockfile
    lockfile_exit "$_MS_LOCKFILE"
}

# set the trap to run if prematurely exited
trap "cleanup" 2

# run the program
main "$@"


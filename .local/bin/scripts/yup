#!/usr/bin/env sh

# a command to upgrade yarn dependencies

# function to test if yarn is installed
has_yarn () {
    command -v yarn >/dev/null 2>&1
}

# function to test if npm is installed
has_npm () {
    command -v npm >/dev/null 2>&1
}

# function to test if jq is installed
has_jq () {
    command -v jq >/dev/null 2>&1
}

# function to test if there's a local package.json
has_package_json () {
    [ -e ./package.json ]
}

# error logging function
log_err () {
    echo "error: $*"
}

# usage function
usage () {
    cat << 'eof'
Usage: yup [-h/--help] [-d/--dev] [-D/--both] [-n/--npm]

Options:
    -h, --help  show this help message
    -d, --dev   update the devDependencies
    -b, --both  update both dependencies and devDependencies
    -n, --npm   update the dependencies using npm
eof
}

# function to upgrade yarn dependencies
main () {

    # set package manager command
    if has_yarn; then
        PM_CMD="yarn add"
    elif has_npm; then
        PM_CMD="npm install"
    else
        log_err "yarn and/or npm aren't installed"
        return 1
    fi

    # if jq isn't installed, throw an error
    if ! has_jq; then
        log_err "jq isn't installed"
        return 1
    fi

    # if there's no package.json file, throw an error
    if ! has_package_json; then
        log_err "no package.json file found"
        return 1
    fi

    # set default dependency scope
    SCOPE="dependencies"
    BOTH=false

    # check for args
    for arg in "$@"; do
        # help/usage command
        if test "$arg" = "-h" -o "$arg" = "--help"; then
            usage
            return 0
        fi

        # set the command to use npm if the arg is passed
        if test "$arg" = "-n" -o "$arg" = "--npm"; then
            PM_CMD="npm install"
        fi

        # use set scope to devDependencies if the arg is passed
        if test "$arg" = "-d" -o "$arg" = "--dev"; then
            SCOPE="devDependencies"
            PM_CMD="$PM_CMD --save-dev"
        elif test "$arg" = "-b" -o "$arg" = "--both"; then
            BOTH=true
        fi
    done

    # grab deps from package.json
    # start with empty object, then 
    DEPS="$(jq "{}+.$SCOPE|keys|map(.+\" \")+[\"\"]|add" ./package.json | sed -E 's/^\"//; s/( )?\"$//')"

    # if there aren't any dependencies, exit the function
    if test -z "$DEPS"; then
        echo "no $SCOPE in package.json"
        return 0
    fi

    # set the command to run
    CMD_TO_RUN="$PM_CMD $DEPS"

    # run the command
    echo "Updating $SCOPE..."
    $CMD_TO_RUN

    # if the both arg was passed, run the command again, but for devDependencies
    if $BOTH; then
        # change the scope to devDependencies
        PM_CMD="$PM_CMD --dev"
        SCOPE="devDependencies"

        # grab the deps again
        DEPS="$(jq "{}+.$SCOPE|keys|map(.+\" \")+[\"\"]|add" ./package.json | sed -E 's/^\"//; s/( )?\"$//')"

        # if there aren't any dependencies, exit the function
        if test -z "$DEPS"; then
            echo "no $SCOPE in package.json"
            return 0
        fi

        # set the command to run
        CMD_TO_RUN="$PM_CMD $DEPS"

        # run the command
        echo "Updating $SCOPE..."
        $CMD_TO_RUN
    fi

    # end the function
    echo "Upgrades finished!"
    return 0
}

main "$@"

